module Test {
	 const long Test_shared_SummaryState_DisabledState=1;
	 const long Test_shared_SummaryState_EnabledState=2;
	 const long Test_shared_SummaryState_FaultState=3;
	 const long Test_shared_SummaryState_OfflineState=4;
	 const long Test_shared_SummaryState_StandbyState=5;
	struct arrays {
	  double	private_rcvStamp;    //private
	  boolean	boolean0[5];
	  octet	byte0[5];
	  short	short0[5];
	  long	int0[5];
	  long	long0[5];
	  long long	longLong0[5];
	  octet	octet0[5];
	  unsigned short	unsignedShort0[5];
	  unsigned long	unsignedInt0[5];
	  unsigned long	unsignedLong0[5];
	  float	float0[5];
	  double	double0[5];
	};
	#pragma keylist arrays TestID
	 const long indexEnumeration_any=1;
	struct command_abort {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_abort TestID
	struct command_disable {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_disable TestID
	struct command_enable {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_enable TestID
	struct command_enterControl {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_enterControl TestID
	struct command_exitControl {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_exitControl TestID
	struct command_fault {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_fault TestID
	struct command_setArrays {
	  double	private_rcvStamp;    //private
	  boolean	boolean0[5];
	  octet	byte0[5];
	  short	short0[5];
	  long	int0[5];
	  long	long0[5];
	  long long	longLong0[5];
	  octet	octet0[5];
	  unsigned short	unsignedShort0[5];
	  unsigned long	unsignedInt0[5];
	  unsigned long	unsignedLong0[5];
	  float	float0[5];
	  double	double0[5];
	};
	#pragma keylist command_setArrays TestID
	struct command_setAuthList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	};
	#pragma keylist command_setAuthList TestID
	struct command_setLogLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	};
	#pragma keylist command_setLogLevel TestID
	struct command_setScalars {
	  double	private_rcvStamp;    //private
	  boolean	boolean0;
	  octet	byte0;
	  string	char0;
	  short	short0;
	  long	int0;
	  long	long0;
	  long long	longLong0;
	  octet	octet0;
	  unsigned short	unsignedShort0;
	  unsigned long	unsignedInt0;
	  unsigned long	unsignedLong0;
	  float	float0;
	  double	double0;
	  string<20>	string0;
	};
	#pragma keylist command_setScalars TestID
	struct command_setValue {
	  double	private_rcvStamp;    //private
	  string<256>	parametersAndValues;
	};
	#pragma keylist command_setValue TestID
	struct command_standby {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_standby TestID
	struct command_start {
	  double	private_rcvStamp;    //private
	  string<256>	settingsToApply;
	};
	#pragma keylist command_start TestID
	struct command_wait {
	  double	private_rcvStamp;    //private
	  long	cmdSeqNum;
	  long	ack;
	  double	duration;
	};
	#pragma keylist command_wait TestID
	struct logevent_appliedSettingsMatchStart {
	  double	private_rcvStamp;    //private
	  boolean	appliedSettingsMatchStartIsTrue;
	  long	priority;
	};
	#pragma keylist logevent_appliedSettingsMatchStart TestID
	struct logevent_arrays {
	  double	private_rcvStamp;    //private
	  boolean	boolean0[5];
	  octet	byte0[5];
	  short	short0[5];
	  long	int0[5];
	  long	long0[5];
	  long long	longLong0[5];
	  octet	octet0[5];
	  unsigned short	unsignedShort0[5];
	  unsigned long	unsignedInt0[5];
	  unsigned long	unsignedLong0[5];
	  float	float0[5];
	  double	double0[5];
	  long	priority;
	};
	#pragma keylist logevent_arrays TestID
	 const long arrays_Int0ValueEnum_Zero=0;
	 const long arrays_Int0ValueEnum_Two=2;
	 const long arrays_Int0ValueEnum_Four=04;
	 const long arrays_Int0ValueEnum_Five=0x05;
	struct logevent_authList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	  long	priority;
	};
	#pragma keylist logevent_authList TestID
	struct logevent_errorCode {
	  double	private_rcvStamp;    //private
	  long	errorCode;
	  string	errorReport;
	  string	traceback;
	  long	priority;
	};
	#pragma keylist logevent_errorCode TestID
	struct logevent_heartbeat {
	  double	private_rcvStamp;    //private
	  boolean	heartbeat;
	  long	priority;
	};
	#pragma keylist logevent_heartbeat TestID
	struct logevent_logLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	  long	priority;
	};
	#pragma keylist logevent_logLevel TestID
	struct logevent_logMessage {
	  double	private_rcvStamp;    //private
	  string	name;
	  long	level;
	  string	message;
	  string	traceback;
	  string	filePath;
	  string	functionName;
	  long	lineNumber;
	  long	process;
	  long	priority;
	};
	#pragma keylist logevent_logMessage TestID
	struct logevent_scalars {
	  double	private_rcvStamp;    //private
	  boolean	boolean0;
	  octet	byte0;
	  string	char0;
	  short	short0;
	  long	int0;	// enum : Int0Enum_One, Int0Enum_Two, Int0Enum_Three
	  long	long0;
	  long long	longLong0;
	  octet	octet0;
	  unsigned short	unsignedShort0;
	  unsigned long	unsignedInt0;
	  unsigned long	unsignedLong0;
	  float	float0;
	  double	double0;
	  string<20>	string0;
	  long	priority;
	};
	#pragma keylist logevent_scalars TestID
	 const long scalars_Int0Enum_One=1;
	 const long scalars_Int0Enum_Two=2;
	 const long scalars_Int0Enum_Three=3;
	 const long Test_shared_Enum_One=1;
	 const long Test_shared_Enum_Two=2;
	 const long Test_shared_Enum_Three=3;
	 const long Test_shared_ValueEnum_Zero=0;
	 const long Test_shared_ValueEnum_Two=2;
	 const long Test_shared_ValueEnum_Four=04;
	 const long Test_shared_ValueEnum_Five=0x05;
	struct logevent_settingVersions {
	  double	private_rcvStamp;    //private
	  string	recommendedSettingsVersion;
	  string	recommendedSettingsLabels;
	  string	settingsUrl;
	  long	priority;
	};
	#pragma keylist logevent_settingVersions TestID
	struct logevent_settingsApplied {
	  double	private_rcvStamp;    //private
	  string<256>	settingsVersion;
	  string	otherSettingsEvents;
	  long	priority;
	};
	#pragma keylist logevent_settingsApplied TestID
	struct logevent_simulationMode {
	  double	private_rcvStamp;    //private
	  long	mode;
	  long	priority;
	};
	#pragma keylist logevent_simulationMode TestID
	struct logevent_softwareVersions {
	  double	private_rcvStamp;    //private
	  string<256>	salVersion;
	  string<256>	xmlVersion;
	  string<256>	openSpliceVersion;
	  string<256>	cscVersion;
	  string	subsystemVersions;
	  long	priority;
	};
	#pragma keylist logevent_softwareVersions TestID
	struct logevent_summaryState {
	  double	private_rcvStamp;    //private
	  long	summaryState;
	  long	priority;
	};
	#pragma keylist logevent_summaryState TestID
	struct scalars {
	  double	private_rcvStamp;    //private
	  boolean	boolean0;
	  octet	byte0;
	  string	char0;
	  short	short0;
	  long	int0;	// enum : Int0Enum_One, Int0Enum_Two, Int0Enum_Three
	  long	long0;
	  long long	longLong0;
	  octet	octet0;
	  unsigned short	unsignedShort0;
	  unsigned long	unsignedInt0;
	  unsigned long	unsignedLong0;
	  float	float0;
	  double	double0;
	  string<20>	string0;
	};
	#pragma keylist scalars TestID
	struct ackcmd {
  double	private_rcvStamp;    //private
	  long	TestID;
	  long	cmdSeqNum;
	  long	ack;
	  long	error;
	  string<256>	result;
	  string	identity;
	  long	host;
	  long	origin;
	  long	cmdtype;
	  double	timeout;
	};
	#pragma keylist ackcmd TestID
};

